///////////////////////////////////////////////////////////////////////////////////////////////////
//  IOControl.cpp
///////////////////////////////////////////////////////////////////////////////////////////////////
//  This source file includes functions for I/O control
///////////////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Programmer:		Masayuki HARA (Assitant Professor)
//  Affiliation:	Higuchi & Yamamoto Lab. (Advanced Mechatoronics Lab.)
//					School of Engineering, The University of Tokyo
//  Created date:	26.01.2009
//	Updated date:	20.04.2009
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//  include

#include <stdio.h>
#include <windows.h>
#include <windowsx.h>
#include <conio.h>
#include <string.h>
#include <time.h>
#include <math.h>

#include "IOControl.h"
#include "RoboticsTools.h"

#include "NI-DAQ/NIDAQmx.h"		//  National Instruments USB card driver


///////////////////////////////////////////////////////////////////////////////////////////////////
//	define



///////////////////////////////////////////////////////////////////////////////////////////////////
//	variable

const float AO_MIN_VAL = -10.0;
const float AO_MAX_VAL = 10.0;

const float AI_MIN_VAL = -5.0;
const float AI_MAX_VAL = 5.0;

const uInt32 ENC_RESOLUTION = 1000;
const uInt32 HD_GEAR_RATIO = 50;

int32 ai_read;
int32 ctr_read;
int32 do_write;
int32 di_read;
int32 di_bps;

TaskHandle AO_TaskHandle;
TaskHandle AI_TaskHandle;
TaskHandle *CTR_TaskHandle;
TaskHandle DO_TaskHandle;
TaskHandle DI_TaskHandle;

const double dOffsetAngle[3] = {0.0, PI / 2.0, PI / 2.0};


///////////////////////////////////////////////////////////////////////////////////////////////////
//	function



///////////////////////////////////////////////////////////////////////////////////////////////////
//	int IO_OpenDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Open device (Create task for DAQ)
///////////////////////////////////////////////////////////////////////////////////////////////////
int IO_OpenDevice(void)
{
	char AO_PortNum[16], AI_PortNum[16], CTR_PortNum[16], DO_PortNum[32], DI_PortNum[32];
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  Configure analog output ports
	if (AO_PORT_NUM > 0) {
		if (AO_PORT_NUM == 1) {
			sprintf(AO_PortNum, "Dev%d/ao0", (int)AO_DEV_NUM);
		} else {
			sprintf(AO_PortNum, "Dev%d/ao0:%d", (int)AO_DEV_NUM, (int)AO_PORT_NUM - 1);
		}

		if (DAQmxCreateTask("", &AO_TaskHandle) != 0) {
			return -1;
		}

		if (DAQmxCreateAOVoltageChan(AO_TaskHandle, AO_PortNum, "", AO_MIN_VAL, AO_MAX_VAL, 
			DAQmx_Val_Volts, "") != 0) {
			return -2;
		}
	}

	//  Configure analog input ports
	if (AI_PORT_NUM > 0) {
		if (AI_PORT_NUM == 1) {
			sprintf(AI_PortNum, "Dev%d/ai0", (int)AI_DEV_NUM);
		} else {
			sprintf(AI_PortNum, "Dev%d/ai0:%d", (int)AI_DEV_NUM, (int)AI_PORT_NUM - 1);
		}

		if (DAQmxCreateTask("", &AI_TaskHandle) != 0) {
			return -3;
		}

		if (DAQmxCreateAIVoltageChan(AI_TaskHandle, AI_PortNum, "", DAQmx_Val_RSE/*DAQmx_Val_Cfg_Default*/, 
			AI_MIN_VAL, AI_MAX_VAL, DAQmx_Val_Volts, "") != 0) {
			return -4;
		}
	}

	//  Configure counter ports
	if (CTR_PORT_NUM > 0) {
		CTR_TaskHandle = (TaskHandle *)calloc(CTR_PORT_NUM, sizeof(TaskHandle));
		for (unsigned int i = 0; i < CTR_PORT_NUM; i++) {
			sprintf(CTR_PortNum, "Dev%d/ctr%d", (int)CTR_DEV_NUM, i);
			
			if (DAQmxCreateTask("", &CTR_TaskHandle[i]) != 0) {
				return -5;
			}

			if (DAQmxCreateCIAngEncoderChan(CTR_TaskHandle[i], CTR_PortNum, "", DAQmx_Val_X4, 0, 
				0.0, DAQmx_Val_AHighBHigh, /*DAQmx_Val_Degrees*/DAQmx_Val_Radians, ENC_RESOLUTION, 0.0, "") != 0) {
				return -6;
			}
		}
	}

	//  Configure digital output ports
	if (DO_PORT_NUM > 0) {
		if (DO_PORT_NUM == 1) {
			sprintf(DO_PortNum, "Dev%d/port0/line0:7", (int)DO_DEV_NUM);
		} else {
			sprintf(DO_PortNum, "Dev%d/port0:%d", (int)DO_DEV_NUM, (int)DO_PORT_NUM - 1);
		}

		if (DAQmxCreateTask("", &DO_TaskHandle) != 0) {
			return -7;
		}

		if (DAQmxCreateDOChan(DO_TaskHandle, DO_PortNum, "", DAQmx_Val_ChanForAllLines) != 0) {
			return -8;
		}
	}

	//  Configure digital input ports
	if (DI_PORT_NUM > 0) {
		if (DI_PORT_NUM == 1) {
			//sprintf(DI_PortNum, "Dev%d/port0/line8:15", (int)DI_DEV_NUM);
			sprintf(DI_PortNum, "Dev%d/port2/line0:7", (int)DI_DEV_NUM);
		} else {
			sprintf(DI_PortNum, "Dev%d/port0:%d", (int)DI_DEV_NUM, (int)DI_PORT_NUM - 1);
		}

		if (DAQmxCreateTask("", &DI_TaskHandle) != 0) {
			return -9;
		}

		if (DAQmxCreateDIChan(DI_TaskHandle, DI_PortNum, "", DAQmx_Val_ChanForAllLines) != 0) {
			return -10;
		}
	}

	return 0;
}

//	int IO_OpenDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//	int IO_StartDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Start device (Start task for DAQ)
///////////////////////////////////////////////////////////////////////////////////////////////////
int IO_StartDevice(void)
{
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  Start analog output ports
	if (AO_PORT_NUM > 0) {
		if (DAQmxStartTask(AO_TaskHandle) != 0) {
			return -1;
		}
	}

	//  Start analog input ports
	if (AI_PORT_NUM > 0) {
		if (DAQmxStartTask(AI_TaskHandle) != 0) {
			return -2;
		}
	}

	//  Start counter ports
	if (CTR_PORT_NUM > 0) {
		for (unsigned int i = 0; i < CTR_PORT_NUM; i++) {
			if (DAQmxStartTask(CTR_TaskHandle[i]) != 0) {
				return -3;
			}
		}
	}

	//  Start digital output ports
	if (DO_PORT_NUM > 0) {
		if (DAQmxStartTask(DO_TaskHandle) != 0) {
			return -4;
		}
	}

	//  Start digital input ports
	if (DI_PORT_NUM > 0) {
		if (DAQmxStartTask(DI_TaskHandle) != 0) {
			return -5;
		}
	}


	return 0;
}

//	int IO_StartDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//	int IO_StopDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Stop device (Stop task for DAQ)
///////////////////////////////////////////////////////////////////////////////////////////////////
int IO_StopDevice(void)
{
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  Stop analog output ports
	if (AO_PORT_NUM > 0) {
		if (DAQmxStopTask(AO_TaskHandle) != 0) {
				return -1;
		}
	}

	//  Stop analog input ports
	if (AI_PORT_NUM > 0) {
		if (DAQmxStopTask(AI_TaskHandle) != 0) {
			return -2;
		}
	}

	//  Stop counter ports
	if (CTR_PORT_NUM > 0) {
		for (unsigned int i = 0; i < CTR_PORT_NUM; i++) {
			if (DAQmxStopTask(CTR_TaskHandle) != 0) {
				return -3;
			}
		}
	}

	//  Stop digital output ports
	if (DO_PORT_NUM > 0) {
		if (DAQmxStopTask(DO_TaskHandle) != 0) {
			return -4;
		}
	}

	//  Stop digital input ports
	if (DI_PORT_NUM > 0) {
		if (DAQmxStopTask(DI_TaskHandle) != 0) {
			return -5;
		}
	}
	return 0;
}

//	int IO_StopDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//	int IO_CloseDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Close device (Clear task for DAQ)
///////////////////////////////////////////////////////////////////////////////////////////////////
int IO_CloseDevice(void)
{
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  Close analog output ports
	if (AO_PORT_NUM > 0) {
		if (DAQmxClearTask(AO_TaskHandle) != 0) {
			return -1;
		}
	}

	//  Close analog input ports
	if (AI_PORT_NUM > 0) {
		if (DAQmxClearTask(AI_TaskHandle) != 0) {
			return -2;
		}
	}

	//  Close counter ports
	if (CTR_PORT_NUM > 0) {
		for (unsigned int i = 0; i < CTR_PORT_NUM; i++) {
			if (DAQmxClearTask(CTR_TaskHandle[i]) != 0) {
				return -3;
			}
		}
	}

	//  Clopse digital output ports
	if (DO_PORT_NUM > 0) {
		if (DAQmxClearTask(DO_TaskHandle) != 0) {
			return -4;
		}
	}

	//  Clopse digital input ports
	if (DI_PORT_NUM > 0) {
		if (DAQmxClearTask(DI_TaskHandle) != 0) {
			return -5;
		}
	}

	return 0;
}

//	int IO_ClearDevice(void)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Data acquisition functions
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//	void IO_OutputVoltage(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Declaration			:		IOControl.h
//	Return value		:		Nothing
//	Argument			:		double *		:	Output voltage vector [V]
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Output analog voltage
///////////////////////////////////////////////////////////////////////////////////////////////////
void IO_OutputVoltage(double *output)
{
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	float64 *DAQ_data;

	DAQ_data = (float64 *)calloc(AO_PORT_NUM, sizeof(float64));

	for (unsigned int i = 0; i < AO_PORT_NUM; i++) {
		DAQ_data[i] = (float64)output[i];
	}

	DAQmxWriteAnalogF64(AO_TaskHandle, 1, 1, 1.0, DAQmx_Val_GroupByChannel, DAQ_data, NULL, NULL);
}

//	//	void IO_OutputVoltage(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//	void IO_OutputZeroVoltage(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Declaration			:		IOControl.h
//	Return value		:		Nothing
//	Argument			:		Nothing
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Output zero voltage
///////////////////////////////////////////////////////////////////////////////////////////////////
void IO_OutputZeroVoltage(void)
{
	float64 *DAQ_data;

	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	DAQ_data = (float64 *)calloc(AO_PORT_NUM, sizeof(float64));

	for (unsigned int i = 0; i < AO_PORT_NUM; i++) {
		DAQ_data[i] = (float64)0.0;
	}

	DAQmxWriteAnalogF64(AO_TaskHandle, 1, 1, 1.0, DAQmx_Val_GroupByChannel, DAQ_data, NULL, NULL);
}

//	void IO_OutputZeroVoltage(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
	


///////////////////////////////////////////////////////////////////////////////////////////////////
//	void IO_GetAnalogVoltage(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Declaration			:		IOControl.h
//	Return value		:		Nothing
//	Argument			:		doble *			:		Analog voltage vector [V]	
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Get alalog voltage
///////////////////////////////////////////////////////////////////////////////////////////////////
void IO_GetAnalogVoltage(double *input)
{
	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	float64 *DAQ_data;

	DAQ_data = (float64 *)calloc(AI_PORT_NUM, sizeof(float64));

	DAQmxReadAnalogF64(AI_TaskHandle, 1, 1.0, 
		DAQmx_Val_GroupByChannel, DAQ_data, AI_PORT_NUM, &ai_read, NULL);

	for (unsigned int i = 0; i < AI_PORT_NUM; i++) {
		input[i] = (double)DAQ_data[i];
	}
}

//	void IO_GetAnalogVoltage(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//	void IO_GetAngleFromEnc(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Declaration			:		IOControl.h
//	Return value		:		Nothing
//	Argument			:		doble *			:		Encoder angle vector [rad]	
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Get angles from encoders as [rad] unit
///////////////////////////////////////////////////////////////////////////////////////////////////
void IO_GetAngleFromEnc(double *angle)
{
	float64 *DAQ_data;

	DAQ_data = (float64 *)calloc(CTR_PORT_NUM, sizeof(float64));

	for (unsigned int i = 0; i < CTR_PORT_NUM; i++) {
		DAQmxReadCounterF64(CTR_TaskHandle[i], 1, 1.0, &DAQ_data[i], 1, &ctr_read, NULL);
		angle[i] = (double)(DAQ_data[i] / HD_GEAR_RATIO);
	}
}

//	void IO_GetAngleFromEnc(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//	void IO_GetJointAngle(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Declaration			:		IOControl.h
//	Return value		:		Nothing
//	Argument			:		doble *			:		Joint angle vector [rad]	
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Get joint angles as [rad] unit
///////////////////////////////////////////////////////////////////////////////////////////////////
void IO_GetJointAngle(double *joint_angle)
{
	double angle[CTR_PORT_NUM];

	///////////////////////////////////////////////////////////////////////////////////////////////
	//  NI PCIe-6323
	///////////////////////////////////////////////////////////////////////////////////////////////
	IO_GetAngleFromEnc(angle);

	//  Adjustment of rotational direction
	joint_angle[0] = 0.0 + dOffsetAngle[0];
	joint_angle[2] = angle[0] + angle[1] + dOffsetAngle[2];
	joint_angle[1] = -angle[0] + dOffsetAngle[1];
}

//	void IO_GetJointAngle(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////