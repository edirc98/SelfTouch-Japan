///////////////////////////////////////////////////////////////////////////////////////////////////
//  SamplerTools.cpp
///////////////////////////////////////////////////////////////////////////////////////////////////
//  This source file includes functions for sampler
///////////////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//  Programmer:		Masayuki HARA (Assitant Professor)
//  Affiliation:	Higuchi & Yamamoto Lab. (Advanced Mechatoronics Lab.)
//					School of Engineering, The University of Tokyo
//  Created date:	14.01.2009
//	Updated date:	14.01.2009
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//  include

#include <stdio.h>
#include <windows.h>
#include <conio.h>
#include <string.h>
#include <time.h>
#include <math.h>

#include "resource.h"

#include "DeviceControl.h"
#include "MainGraph.h"
#include "SamplerTools.h"
#include "WinStyleMain.h"


///////////////////////////////////////////////////////////////////////////////////////////////////
//	define



///////////////////////////////////////////////////////////////////////////////////////////////////
//	variable

LARGE_INTEGER freq;
LARGE_INTEGER QPZeroCount;

BOOL TimeoutFlag = FALSE;
int timerID;


///////////////////////////////////////////////////////////////////////////////////////////////////
//	function

void (*pSampler)(void);
static void CALLBACK TimerFunc(UINT, UINT, DWORD, DWORD, DWORD);



///////////////////////////////////////////////////////////////////////////////////////////////////
//  static void CALLBACK TimerFunc(UINT, UINT, DWORD, DWORD, DWORD)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Timer callback function
///////////////////////////////////////////////////////////////////////////////////////////////////
static void CALLBACK TimerFunc(UINT wlD, UINT wUser, DWORD dwUser, DWORD dw1, DWORD dw2)
{
	if (TimeoutFlag == FALSE) {
		TimeoutFlag = TRUE;
		pSampler();
		TimeoutFlag = FALSE;
	}
}

//  static void CALLBACK TimerFunc(UINT, UINT, DWORD, DWORD, DWORD)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//  void SamplerOn(void (*cnt)(void))
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Function for using fast timer
///////////////////////////////////////////////////////////////////////////////////////////////////
void SamplerOn(void (*cnt)(void))
{
	TIMECAPS caps;

	pSampler = cnt;

	//  Configure event for sampler function
	timeGetDevCaps(&caps, sizeof(caps));
	timeBeginPeriod(caps.wPeriodMin);
	timerID = timeSetEvent((UINT)(SAMP * 1000),
		caps.wPeriodMin, TimerFunc, 0, (UINT)TIME_PERIODIC);

	TimeoutFlag = FALSE;
}

//  void SamplerOn(void (*cnt)(void))
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//  void SamplerOff(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Function for stopping fast timer
///////////////////////////////////////////////////////////////////////////////////////////////////
void SamplerOff(void)
{
	if (timerID != 0) {
		static TIMECAPS caps;

		timeKillEvent(timerID);
		timerID = 0;
		timeGetDevCaps(&caps, sizeof(caps));
		timeEndPeriod(caps.wPeriodMin);

		TimeoutFlag = FALSE;
	}
}

//  void SamplerOff(void)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//  void ResetTime(void)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Reset time
///////////////////////////////////////////////////////////////////////////////////////////////////
void ResetTime(void)
{
	QueryPerformanceFrequency(&freq);
	QueryPerformanceCounter(&QPZeroCount);

}

//  void ResetTime(void)
///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
//  void GetTime(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Get current time
///////////////////////////////////////////////////////////////////////////////////////////////////
void GetTime(double *ctime)
{
	static LARGE_INTEGER count;

	QueryPerformanceCounter(&count);
	*ctime = (double)(count.QuadPart - QPZeroCount.QuadPart) / (double)freq.LowPart;
}

//  void GetTime(double *)
///////////////////////////////////////////////////////////////////////////////////////////////////